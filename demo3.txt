--------------update & merge

to update your local repository to the newest commit, execute 
	
		git pull

in your working directory to fetch and merge remote changes.
to merge another branch into your active branch (e.g. master), use

	git merge <branch>


in both cases git tries to auto-merge changes. 
Unfortunately, this is not always possible and results in conflicts. 
You are responsible to merge those conflicts manually by editing the files shown by git. 
After changing, you need to mark them as merged with

	git add <filename>


before merging changes, you can also preview them by using

	git diff <source_branch> <target_branch>





-------------tagging

it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. 
You can create a new tag named 1.0.0 by executing

		git tag 1.0.0 1b2e1d63ff


the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. 
You can get the commit id by looking at the log


-----------------logging
in its simplest form, you can study repository history using
		 git log

You can add a lot of parameters to make the log look like what you want. 
To see only the commits of a certain author:

		git log --author=bob

To see a very compressed log where each commit is one line:

		git log --pretty=oneline

Or maybe you want to see an ASCII art tree of all the branches, 
decorated with the names of tags and branches: 

		git log --graph --oneline --decorate --all

See only which files have changed: 

		git log --name-status

These are just a few of the possible parameters you can use. For more, see
	
		git log --help
		