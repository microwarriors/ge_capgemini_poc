->>
javascript   binding code(Angular 2)     Html/UI
\

function uitoObject(){
cust.CustmerName=$("#TxtCustomerName").val();
}

function ObjecttoUi(){

$("#TxtCustomerName").val(cust.CustomerName);

}


TxtuserName -> angualr code -> Customer

view -> angualr cede -> model objects


typescript:

class Customer{

}

=






var Customer=(function(){

function Customer(){
}
return Customer;
}
());  // Internally typescript will compile ( must be right word would be “transpile”) in to pure javascript code in terms of functions , closures and IIFE.


npm install -g typescript


steps 3 :  cofigurig the task runner
Grunt:
CONTROL + SHIFT + B and click on configure task runner 


task.json
o if you now press CONTROL +SHIFT + B it will build the TS files to JS files.




components and modules:

-------------------\
                                 HTML UI<-modules<-componets<-model


model:  business logic / typscript classes

component:  binding code  html+ui

module:   code to logically group the components:


UI:  view logic  HTml / cSS/ bootstrap


MODEl:
----------

Customer.ts file

export class Customer{

customerName: string= "";
customerCode : string ="";
customerAmount:number=0;
}

component:
-----------
CustomerComponent.ts

//import statements



import{Customer} from '../Model/Customer'
import{component} from "@angular/core"



//meta data attriute  ties up html ui  with required componet class.
@component(
{
selector:"customer-ui:,
templateUrl:"../UI/Customer.html"

}
)
//  component exposing the model 
export class CustomerComponet{

currentCustomer:Customer=new Customer()
}



HTML UI:
---------
directive:"[(ngmodule)]"
currentCustomer.customerName
interpolation:{}
{{currentCustomer.cusotmerName}}

<div>
Name:
<input type="text" [(ngmodel)]="currentCustomer.customerName"><br /><br />

Code:
<input type="text" [(ngmodel)]="currentCustomer.customerCode"><br/><br/>

Amount:
<input type="text" [(ngmodel)]="currentCustomer.customerAmount"><br/><br/>

</div>

{{currentCustomer.customerName}}<br/><br/>

{{currentCustomer.customerCode}}<br/><br/>

{{currentCustomer.customerAmount}}<br/><br/>



Module:

-------------

logical grouping of components
imports:
declarations:
bootstrap:






import {NgModule} from 'angular/core';
import {BrowserModule} from 'angular/platform-browser';
import {FormsModule} from 'angular/forms''
import {CudtomerComponets} from '../component/CustomerComponent';


@NgModule({
imports:[BrowserModule,FormsModule],
declaratiuon:[CustomerComponent],
bootstrap:[CustomerComponet]
}
)
expot class MainModuleLibrary{}



startup.js:
-----------------


startup module  which is to be bootstraped:

import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';
import {MainModuleLibrary} from '../Module/MainModuleLibrary';


const platform =platformBrowserDynamic();

platform.bootstrapModule(MainModuleLibrary);


Involking the startup.js
------------------------
HTML page to invoke the startup.js

<script src="../../node_modules/core-js/client/shim.min.js"></script>
<script src="../../node_modules/Zone.js"></script>
<script src="../../node_modules/reflect-metadat/Reflect.js"></script>
<script src="../../node_modules/systemjs/dist/system.src.js"></script>



<script src="../systemjs.config.js"></script>
<script>
System.config({
"defaultJSExtensions":true

});
System.import('startup').catch(function (err){console.error(err);})  
</script>


<customer-ui>
</customer-ui>
@component({

selector:"customer-ui"
template-url:"../UI/Customer.html"

})

Full HTML code:

<html>
<head>

<title></title>
<!--                         -->
<script src="../../node_modules/core-js/client/shim.min.js"></script>
<script src="../../node_modules/Zone.js"></script>
<script src="../../node_modules/reflect-metadat/Reflect.js"></script>
<script src="../../node_modules/systemjs/dist/system.src.js"></script>
</head>
<!-- cofigure Systemjs -->

<script src="../systemjs.config.js"></script>
<script>
System.config({
"defaultJSExtensions":true

});
System.import('startup').catch(function (err){console.error(err);})  
</script>

<body>
<customer-ui></customer-ui>


</body>
</html>











====================================================================================================================================


Angualr 2 + router

index.html
	

<html>
<head>

<base href="."/>
<title>Predix  dashboard</title>
<!-- CSS files -->

<link rel="icon" type="image/png" href="content/images/favicon.ico"/>
<link rel="stylesheet" href="///>




<!-- IE support pollyfills>

<scripts src="node_modules/core-js/client/shim.min.js"></script>

<script>
system.import('app').catch(console.error.bind(console));

</script>

.................
.............
</head>


<body>

<Predix dashboard>



</predic dashboard>

</body>



</html>

index.html is   startup page.
loads the css  and js.
configure SystemJS to  load library module.



app
 ---> main.ts

import {paltformBrowserDynamic} from '@angualr/platform-broser-dynamuc';

import{Appmodule}  from './app.module';

platformBrowserDynamic().bootstrapModule(AppModule);



root module
app
  ---->app.module.ts

import{NgModule}  from'@angular/core';

import {BrowserModule} from '

import {UIRouterModule}

import {FormsModule}

//App root
import {Appcomponent}

import {NavbarComponent}


//components

omport {PersonalComponet}
omport {}
omport {}
omport {}
omport {}


//App Router
import{UIRouterConfigFn}
import {appStates}

//service

import{FormDataServices}

import{WorkflowService}


@NgModule(
{
imports:[BrowserModule,FormsModule,

UIRouterModule.forRoot({
states:appStates,
useHash:true,
config:UIRouterConfigFn
})
],
providers:[{provide:FormDataService,useClass:FormDataService},
{provide:}],
declarations:[Appcomponet, Navbarcompr...............],
bootstrap:[AppComponet]
})

export class AppModule{}







configure  the routes for router:


app
   ---->app.states.ts

import {personelComponet} from './personal/personal.component';
-
-
-
import {workflowService} from'./workflow/workflow.service;


export const appstates = [

{name:'personal'   , url:'/personal' ,component:personalComponet},

{name: ,url: ,component: , onEnter:verifyworkflow},

];

function verifyWorkflow(transition, state){








